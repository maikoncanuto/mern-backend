name: ci-develop

on:
  push:
    branches: [ develop ]

env:
  ENV_CHECKOUT_CACHE: 'npm'
  ENV_NODE_VERSION: '16.x'
  ENV_REGISTRY_URL: 'https://npm.pkg.github.com'
  ENV_NODE_ENV: 'development'
  ENV_GIT_USERNAME: 'Filipe Santos'
  ENV_GIT_EMAIL: 'filipe.l.santos@galp.com'

jobs:

  scan-config:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Validate package.json
        run: |
          PACKAGE_NAME=$(cat package.json | jq -r '.name')
          PRIVATE=$(cat package.json | jq -r '.private')
          PUBLISH_CONFIG=$(cat package.json | jq '.publishConfig')
          REPOSITORY=$(cat package.json | jq '.repository')

          if [[ ! ${PACKAGE_NAME} =~ ^@[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$ ]]; then
            echo "Error: attribute name is not in the format @<company>/<name>"
            exit 1
          fi

          if [[ ${PUBLISH_CONFIG} == "null" ]]; then
            echo "Error: publishConfig is required"
            exit 1
          fi

          if [[ ${REPOSITORY} == "null" ]]; then
            echo "Error: repository is required"
            exit 1
          fi

          if [[ ${PRIVATE} == "true" ]]; then
            echo "Warning: private attribute is set to true, changing to false"
            jq '.private = false' package.json > package.json.tmp && mv package.json.tmp package.json
          fi

  scan-packages:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Scan Packages
        run: npm audit
        env:
          CI: true

  change-version:
    needs: [ scan-config ]
    timeout-minutes: 1
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Get branch name
        run: |
          echo "BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.ENV_NODE_VERSION }}

      - name: Configure git
        run: |
          git config --global user.name ${{ env.ENV_GIT_USERNAME }}
          git config --global user.email ${{ env.ENV_GIT_EMAIL }}

      - name: Execute change version
        run: |
          if [[ "$BRANCH_NAME" == *feature* ]]; then
            npm version minor
          elif [[ "$BRANCH_NAME" == *bugfix* ]]; then
            npm version patch
          elif [[ "$BRANCH_NAME" == *hotfix* ]]; then
            npm version patch
          else
            echo "This branch is not a feature or bugfix or hotfix branch"
          fi

      - name: Push changes
        run: git push

  packages:
    needs: [ change-version ]
    timeout-minutes: 1
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.ENV_NODE_VERSION }}

      - name: Install dependencies
        run: npm ci --force

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

  quality-eslint:
    timeout-minutes: 1
    runs-on: ubuntu-latest
    needs: [ packages ]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.ENV_NODE_VERSION }}

      - name: Restore Cached Dependencies
        uses: actions/cache@v3
        id: npm-cache
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Install Dependencies
        run: npm ci --force

      - name: Lint
        run: npm run lint

  quality-test-unit:
    timeout-minutes: 1
    runs-on: ubuntu-latest
    needs: [ packages ]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.ENV_NODE_VERSION }}

      - name: Restore Cached Dependencies
        uses: actions/cache@v3
        id: npm-cache
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Install Dependencies
        run: npm ci --force

      - name: Lint
        run: npm run test

  quality-test-integration:
    timeout-minutes: 1
    runs-on: ubuntu-latest
    needs: [ packages ]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.ENV_NODE_VERSION }}

      - name: Restore Cached Dependencies
        uses: actions/cache@v3
        id: npm-cache
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Install Dependencies
        run: npm ci --force

      - name: Lint
        run: npm run test:e2e

  quality-test-coverage:
    timeout-minutes: 1
    runs-on: ubuntu-latest
    needs: [ packages ]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.ENV_NODE_VERSION }}

      - name: Restore Cached Dependencies
        uses: actions/cache@v3
        id: npm-cache
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Install Dependencies
        run: npm ci --force

      - name: Coverage
        run: npm run test:cov


  build-and-push-package:
    timeout-minutes: 1
    runs-on: ubuntu-latest
    needs: [ quality-test-unit, quality-test-integration, quality-test-coverage ]

    permissions:
      contents: read
      packages: write

    steps:

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configurar Git
        run: |
          git config --global user.name "Github Actions"
          git config --global user.email "actions@github.com"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.ENV_NODE_VERSION }}

      - name: Get name branch
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "Nome da branch: $BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Restore Cached Dependencies
        uses: actions/cache@v3
        id: npm-cache
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Get Package Version
        run: |
          export VERSION=$(node -p "require('./package.json').version")-${{ env.BRANCH_NAME }}.${{ github.run_id }}
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Update version package.json
        run: |
          npm version ${{ env.VERSION }}

      - name: Install Dependencies
        run: npm ci --force

      - name: Build Artifact
        run: npm run build
        env:
          NODE_ENV: ${{ env.ENV_NODE_ENV }}

      - name: Publish Artifact to Github Packages
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.ENV_NODE_VERSION }}
          registry-url: ${{ env.ENV_REGISTRY_URL }}
          scope: ${{ github.repository_owner }}
      - run: npm ci --force
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-image:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    needs: [ build-and-push-package ]

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  scan-vulnerability-image:
    timeout-minutes: 10
    continue-on-error: true
    runs-on: ubuntu-latest
    needs: [ build-and-push-image ]

    permissions:
      contents: read
      packages: write

    steps:
      - name: Get name branch
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "Nome da branch: $BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Scan vulnerability from Github Packages
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: image
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ env.BRANCH_NAME }}
          format: 'sarif'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          output: 'trivy-results.sarif'