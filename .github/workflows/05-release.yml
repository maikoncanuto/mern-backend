name: ci-release
'on':
  push:
    branches:
      - release/**
concurrency:
  group: 'ci-release-${{ github.workflow }}-${{ github.ref }}'
  cancel-in-progress: true
env:
  ENV_CHECKOUT_CACHE: npm
  ENV_NODE_VERSION: 18.x
  ENV_REGISTRY_URL: 'https://npm.pkg.github.com'
  ENV_NODE_ENV: development
  ENV_GIT_USERNAME: Filipe Santos
  ENV_GIT_EMAIL: filipe.l.santos@galp.com
jobs:
  build-and-push-package:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Configurar Git
        run: |
          git config --global user.name "Github Actions"
          git config --global user.email "actions@github.com"
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '${{ env.ENV_NODE_VERSION }}'
      - name: Get Package Version
        run: |
          export VERSION=$(node -p "require('./package.json').version")-release
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Update version package.json
        run: |
          npm version ${{ env.VERSION }}
      - name: Install Dependencies
        run: npm ci --force
      - name: Build Artifact
        run: npm run build
        env:
          NODE_ENV: '${{ env.ENV_NODE_ENV }}'
      - name: Publish Artifact to Github Packages
        uses: actions/setup-node@v3
        with:
          node-version: '${{ env.ENV_NODE_VERSION }}'
          registry-url: '${{ env.ENV_REGISTRY_URL }}'
          scope: '${{ github.repository_owner }}'
      - run: npm ci --force
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
  build-and-push-image:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    needs:
      - build-and-push-package
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Get Package Version
        run: |
          export VERSION=$(node -p "require('./package.json').version")-release
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: '${{ github.actor }}'
          password: '${{ secrets.GITHUB_TOKEN }}'

      - name: 'Extract metadata (tags, labels) for Docker'
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: 'ghcr.io/${{ github.repository }}'
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}},value=v$VERSION

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: '${{ steps.meta.outputs.tags }}'
          labels: '${{ steps.meta.outputs.labels }}'
  create-release:
    timeout-minutes: 5
    needs:
      - build-and-push-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do RepositÃ³rio
        uses: actions/checkout@v3
      - name: Get Package Version
        run: |
          export VERSION=$(node -p "require('./package.json').version")-release
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Configure git
        run: |
          git config --local user.name ${{ env.ENV_GIT_USERNAME }}
          git config --local user.email ${{ env.ENV_GIT_EMAIL }}
      - name: Create Release from Tag
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          tag_name: '${{ github.ref }}'
          release_name: release/v$VERSION
          body: |
            Create release from tag auto
          draft: false
          prerelease: false
