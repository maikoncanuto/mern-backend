apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: ${ENV_K8_SECRET_STORE_METADATA_NAME}
spec:
  provider:
    aws:
      service: SecretsManager
      region: eu-west-1
      auth:
        jwt:
          serviceAccountRef:
            name: ${ENV_K8_SECRET_STORE_SERVICE_ACCOUNT_REF}
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: ${ENV_K8_EXTERNAL_SECRET_METADATA_NAME}
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: ${ENV_K8_SECRET_STORE_METADATA_NAME}
    kind: SecretStore
  target:
    name: ${ENV_K8_SECRET_NAME}
    creationPolicy: Owner
  data:
  - secretKey: external_cluster_user
    remoteRef:
      key: ${ENV_K8_EXTERNAL_SECRET_REMOTE_REF}
      property: external_cluster_user
  - secretKey: external_cluster_password
    remoteRef:
      key: ${ENV_K8_EXTERNAL_SECRET_REMOTE_REF}
      property: external_cluster_password
  - secretKey: external_cluster_instance
    remoteRef:
      key: ${ENV_K8_EXTERNAL_SECRET_REMOTE_REF}
      property: external_cluster_instance
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${ENV_K8_DEPLOYMENT_METADATA_NAME}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ${ENV_K8_DEPLOYMENT_METADATA_NAME}
  replicas: ${ENV_K8_DEPLOYMENT_REPLICAS}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ${ENV_K8_DEPLOYMENT_METADATA_NAME}
    spec:
      containers:
      - image: ${ENV_K8_DEPLOYMENT_IMAGE}
        imagePullPolicy: Always
        name: ${ENV_K8_DEPLOYMENT_METADATA_NAME}
        ports:
        - containerPort: 8080
        env:
          - name: database_user
            valueFrom:
              secretKeyRef:
                name: ${ENV_K8_SECRET_NAME}
                key: external_cluster_user
                optional: false 
          - name: database_instance
            valueFrom:
              secretKeyRef:
                name: ${ENV_K8_SECRET_NAME}
                key: external_cluster_instance
                optional: false 
          - name: database_password
            valueFrom:
              secretKeyRef:
                name: ${ENV_K8_SECRET_NAME}
                key: external_cluster_password
                optional: false
      imagePullSecrets:
        - name: github-pat-dockerconfig
---
apiVersion: v1
kind: Service
metadata:
  name: ${ENV_K8_DEPLOYMENT_METADATA_NAME}
spec:
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
  type: NodePort
  selector:
    app.kubernetes.io/name: ${ENV_K8_DEPLOYMENT_METADATA_NAME}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${ENV_K8_DEPLOYMENT_METADATA_NAME}
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: ${ENV_K8_DEPLOYMENT_METADATA_NAME}
              port:
                number: 80